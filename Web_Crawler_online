# -*- coding: cp1252 -*-

def get_page(url):
    try:
        import urllib
        return urllib.urlopen(url).read()
    except:
        return ""

def get_next_target(page):
    start_link = page.find('href=')
    if start_link == -1:
        return None, 0
    start_quote = page.find('"', start_link)
    end_quote = page.find('"', start_quote + 1)
    url = page[start_quote + 1:end_quote]
    return url, end_quote

def get_all_links(page):
    links = []
    while True:
        url, endpos = get_next_target(page)
        if url:
            links.append(url)
            page = page[endpos:]
        else:
            break
    return links

def union(list_one, list_two):
    for e in list_two:
        if e not in list_one:
            list_one.append(e)

def add_to_index(index, keyword, url):
    index = []
    for entry in index:
        if entry[0] == keyword:
            entry[1].append(url)
            return
    index.append([keyword, [url]])

def lookup(index, keyword):
    for entry in index:
        if entry[0] == keyword:
            return entry[1]
    return []

def add_page_to_index(index, url, content):
    words = content.split
    for keyword in words:
        add_to_index(index, keyword, url)

def crawl_web(seed):
    tocrawl = [seed]
    crawled = []
    index = []
    while tocrawl:
        page = tocrawl.pop()
        if page not in crawled:
            content = get_page(page)
            add_page_to_index(index, page, content)
            crawled.append(page)
    return index

# MAX PAGES
def crawl_web_max_pages(seed, max_pages):
    tocrawl = [seed]
    crawled = []
    while tocrawl:
        page = tocrawl.pop()
        if page not in crawled and len(crawled) < max_pages:
            union(tocrawl, get_all_links(get_page(page)))
            crawled.append(page)
    return crawled

# MAX DEPTH
def crawl_web_max_depth(seed, max_depth):
    tocrawl = [seed]
    crawled = []
    next_depth = []
    depth = 0
    while tocrawl and depth <= max_depth:
        page = tocrawl.pop()
        if page not in crawled:
            union(next_depth, get_all_links(get_page(page)))
            crawled.append(page)
        if not tocrawl:
            tocrawl, next_depth = next_depth, []
            depth = depth + 1
    return crawled

# OPTIE 1
# print get_all_links(get_page("https://next.youngcapital.nl/"))

# OPTIE 2
# add_to_index(index, "fly", "https://en.wikipedia.org/wiki/Fly")
# add_to_index(index, "Java", "https://next.youngcapital.nl")
# add_to_index(index, "encyclopedia", "https://en.wikipedia.org/wiki/Main_Page")
# add_to_index(index, "Java", "http://udacity.com")
# add_to_index(index, "fly", "https://udacity.github.io/cs101x/index.html")
# add_to_index(index, "Mathematics", "https://en.wikipedia.org/wiki/Main_Page")
# print index

# OPTIE 3
# index = [['udacity', ['http://udacity.com', 'http://npr.org']],
#         ['computing', ['http://acm.org']]]
# print lookup(index, "udacity")
